<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testCase id="11" registryId="0694181c-da4e-47e7-8e7b-1540a45c4320" visibility="Internal">
  <summary/>
  <steps>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="3" title="Set Values: ZapiTestOutcome">
      <arguments>
        <argument id="values">
          <value class="valueList" mutable="Mutable">
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">ZapiTestOutcome</value>
              </namedValue>
              <namedValue name="value">
                <value class="value" valueClass="string">-1</value>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
          </value>
        </argument>
      </arguments>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.If" name="If" testItemId="1" title="If: {TestOutcome = &quot;successful&quot;}">
      <arguments>
        <argument id="condition">
          <value class="eq">
            <lhs class="variable">
              <path element="TestOutcome"/>
            </lhs>
            <rhs class="value" valueClass="string">successful</rhs>
          </value>
        </argument>
      </arguments>
      <clauses>
        <clause name="then" testItemId="2">
          <steps>
            <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="4" title="Set Values: ZapiTestOutcome">
              <arguments>
                <argument id="values">
                  <value class="valueList" mutable="Mutable">
                    <namedValues mutable="Mutable">
                      <namedValue name="valuePath">
                        <value class="value" valueClass="string">ZapiTestOutcome</value>
                      </namedValue>
                      <namedValue name="value">
                        <value class="value" valueClass="string">1</value>
                      </namedValue>
                      <namedValue name="valueScope">
                        <value class="value" valueClass="string">Test</value>
                      </namedValue>
                    </namedValues>
                  </value>
                </argument>
              </arguments>
            </apiCall>
          </steps>
        </clause>
      </clauses>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.If" name="If" testItemId="5" title="If: {TestOutcome = &quot;failed&quot;}">
      <arguments>
        <argument id="condition">
          <value class="eq">
            <lhs class="variable">
              <path element="TestOutcome"/>
            </lhs>
            <rhs class="value" valueClass="string">failed</rhs>
          </value>
        </argument>
      </arguments>
      <clauses>
        <clause name="then" testItemId="6">
          <steps>
            <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="7" title="Set Values: ZapiTestOutcome">
              <arguments>
                <argument id="values">
                  <value class="valueList" mutable="Mutable">
                    <namedValues mutable="Mutable">
                      <namedValue name="valuePath">
                        <value class="value" valueClass="string">ZapiTestOutcome</value>
                      </namedValue>
                      <namedValue name="value">
                        <value class="value" valueClass="string">2</value>
                      </namedValue>
                      <namedValue name="valueScope">
                        <value class="value" valueClass="string">Test</value>
                      </namedValue>
                    </namedValues>
                  </value>
                </argument>
              </arguments>
            </apiCall>
          </steps>
        </clause>
      </clauses>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="14" title="Set Values: TestStatusCode">
      <arguments>
        <argument id="values">
          <value class="valueList" mutable="Mutable">
            <namedValues mutable="Mutable">
              <namedValue name="valuePath">
                <value class="value" valueClass="string">TestStatusCode</value>
              </namedValue>
              <namedValue name="value">
                <value class="variable">
                  <path element="ZapiTestOutcome"/>
                </value>
              </namedValue>
              <namedValue name="valueScope">
                <value class="value" valueClass="string">Test</value>
              </namedValue>
            </namedValues>
          </value>
        </argument>
      </arguments>
    </apiCall>
  </steps>
  <params>
    <param name="TestOutcome" title="Test Outcome">
      <summary/>
      <type>
        <textType>
          <constraints>
            <valueConstraint name="minLength">0</valueConstraint>
            <valueConstraint name="maxLength">9999</valueConstraint>
            <valueConstraint name="regex"/>
          </constraints>
        </textType>
      </type>
    </param>
  </params>
  <outputParams>
    <param name="TestStatusCode" title="TestStatusCode">
      <summary>Test Status Code to be passed while updating the execution status</summary>
      <type>
        <textType>
          <constraints>
            <valueConstraint name="minLength">0</valueConstraint>
            <valueConstraint name="maxLength">9999</valueConstraint>
            <valueConstraint name="regex"/>
          </constraints>
        </textType>
      </type>
      <sourceValue class="variable">
        <path element="TestStatusCode"/>
      </sourceValue>
    </param>
  </outputParams>
  <args>
    <argument id="TestOutcome"/>
  </args>
  <outputArgs>
    <outputArgument id="TestStatusCode">
      <name class="value" valueClass="string">TestStatusCode</name>
    </outputArgument>
  </outputArgs>
</testCase>
